{#recursos}
# Recursos de Interés

A continuación se exponen los recursos de interés que fueron utilizados como referencia para el desarrollo de esta publicación.

### Golang

\[1\] - Web oficial
*Fuente: <https://golang.org>*

\[2\] - Documentación oficial
*Fuente: <https://golang.org/doc>*

\[3\] - Preguntas frecuentes oficiales
*Fuente: <https://golang.org/doc/faq>*

\[4\] - Consola interactiva
*Fuente: <https://play.golang.org>*

\[5\] - Blog oficial
*Fuente: <https://blog.golang.org>*

### Artículos Web

\[6\] - Let's Go: Object-Oriented Programming in Golang
*Fuente: <https://code.tutsplus.com/tutorials/lets-go-object-oriented-programming-in-golang--cms-26540>*

\[7\] - SOLID Go Design
*Fuente: <https://dave.cheney.net/2016/08/20/solid-go-design>*

\[8\] - Is Go An Object Oriented Language?
*Fuente: <http://spf13.com/post/is-go-object-oriented>*

\[9\] - Object Orientation In Go
*Fuente: <https://katcipis.github.io/blog/object-orientation-go>*

\[10\] - Design Patterns for Humans!
*Fuente: <https://github.com/kamranahmedse/design-patterns-for-humans>*

\[11\] - Java Design Patterns - Example Tutorial
*Fuente: <https://www.journaldev.com/1827/java-design-patterns-example-tutorial>*

\[12\] - Design patterns implemented in Java
*Fuente: <http://java-design-patterns.com>*

\[13\] - Design Patterns in Java Tutorial
*Fuente: <https://www.tutorialspoint.com/design_pattern>*

\[14\] - Why extends is evil
*Fuente: <https://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html>*

\[15\] - Inheritance vs Composition
*Fuente: <https://www.techjini.com/blog/inheritance-vs-composition>*

\[16\] - Go is not good
*Fuente: <https://github.com/ksimka/go-is-not-good>*

\[17\] - Go at Google: Language Design in the Service of Software Engineering
*Fuente: <https://talks.golang.org/2012/splash.article>*

### Papers

\[18\] - Publicaciones académicas
*Fuente: <https://github.com/golang/go/wiki/ResearchPapers>*

\[19\] - GoHotDraw: Evaluating the Go Programming Language with Design Patterns - Frank Schmager, Nicholas Cameron, James Noble
*Fuente: <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.188.5524&rep=rep1&type=pdf>*

### Libros

\[20\] - Karl Seguin, "The Litte Go Book", 2014
*Fuente: <https://github.com/karlseguin/the-little-go-book>*

\[21\] - Hemant Jain, "Data Structures & Algorithms In Go" - WOW, 2017
*Fuente: <https://www.amazon.com/Data-Structures-Algorithms-Hemant-Jain-ebook/dp/B075TBM9KS>*

\[22\] - Matt Aimoneaatti, "Go Bootcamp" - 2014
*Fuente: <http://www.golangbootcamp.com>*

\[23\] - Aaron Torres, "Go Cookbook" - Packt, 2017
*Fuente: <https://www.packtpub.com/application-development/go-cookbook>*

\[24\] - Mario Castro Contreras, "Go Design Patterns" - Packt, 2017
*Fuente: <https://www.packtpub.com/application-development/go-design-patterns>*

\[25\] - Vladimir Vivien, Mario Castro Contreras, Mat Ryer, "Go: Design Patterns for Real-World Projects" - Packt, 2017
*Fuente: <https://www.packtpub.com/application-development/go-design-patterns-real-world-projects>*

\[26\] - Matt Butcher, Matt Farina, "Go In Practice" - Manning, 2016
*Fuente: <https://www.manning.com/books/go-in-practice>*

\[27\] - Mat Ryer, "Go Programming Blueprints Second Edition" - Packt, 2016
*Fuente: <https://www.packtpub.com/application-development/go-programming-blueprints-second-edition>*

\[28\] - Shiju Varghese, "Go Recipes" - Apress, 2016
*Fuente: <https://www.apress.com/br/book/9781484211892>*

\[29\] - Mihalis Tsoukalos, "Go Systems Programming" - Packt, 2017
*Fuente: <https://www.packtpub.com/networking-and-servers/go-systems-programming>*

\[30\] - Sau Sheong Chang, "Go Web Programming" - Manning, 2016
*Fuente: <https://www.manning.com/books/go-web-programming>*

\[31\] - Vladimir Vivien, "Learning Go Programming" - Packt, 2016
*Fuente: <https://www.packtpub.com/application-development/learning-go-programming>*

\[32\] - Nathan Zozyra, "Learning Go Web Development" - Packt, 2016
*Fuente: <https://www.packtpub.com/web-development/learning-go-web-development>*

\[33\] - Daniel Whitenack, "Machine Learning With Go" - Packt, 2017
*Fuente: <https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-go>*

\[34\] - Jan Newmarch, "Network Programming with Go" - Apress, 2017
*Fuente: <https://www.apress.com/de/book/9781484226919>*

\[35\] - Nathan Zozyra, Mat Ryer, "Go: Building Web Applications" - Packt, 2016
*Fuente: <https://www.packtpub.com/application-development/go-building-web-applications>*

\[36\] - Mark Summerfield, "Programming in Go" - Addison-Wesley Professional, 2012
*Fuente: <https://www.amazon.com/Programming-Go-Creating-Applications-Developers/dp/0321774639>*

\[37\] - Thorsten Ball, "Writing an Interpreter in Go" - 2016
*Fuente: <https://interpreterbook.com>*

\[38\] - Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, "Patrones de Diseño" - Addison Wesley, 2002
*Fuente: <https://www.amazon.es/Patrones-dise%C3%B1o-Erich-Gamma/dp/8478290591>*

\[39\] - Junade Ali, "Mastering PHP Design Patterns" - Packt, 2016
*Fuente: <https://www.packtpub.com/application-development/mastering-php-design-patterns>*

\[40\] - Robert C. Martin, "Agile Software Development, Principles, Patterns, and Practices" - Alan Apt Series, 2002
*Fuente: <https://www.amazon.es/Software-Development-Principles-Patterns-Practices/dp/0135974445>*

\[41\] - Caleb Doxsey, "Introducing Go" - O'Reilly, 2016
*Fuente: <http://shop.oreilly.com/product/0636920046516.do>*

### Presentaciones

\[42\] - Go for Javaneros
*Fuente: <https://talks.golang.org/2014/go4java.slide#1>*

\[43\] - Rob Pike - Simplicity is Complicated
*Fuente: <https://www.youtube.com/watch?v=rFejpH_tAHM>*

\[44\] - Rob Pike - Go Proverbs
*Fuente: <https://www.youtube.com/watch?v=PAAkCSZUG1c>*

\[45\] - Francesc Campoy - Google Understanding Go Interfaces
*Fuente: <https://www.youtube.com/watch?v=F4wUrj6pmSI>*

\[46\] - Dave Cheney - SOLID Go Design
*Fuente: <https://www.youtube.com/watch?v=zzAdEt3xZ1M>*

\[47\] - William Kennedy - Golang OOP - Composition in Go
*Fuente: <https://www.youtube.com/watch?v=194blNHDdd0>*

### Otros Recursos

\[48\] - Librerías, paquetes y framewoks de *Go*
*Fuente: <https://github.com/avelino/awesome-go>*

\[49\] - Gophers oficiales
*Fuente: <https://golang.org/doc/gopher>*

\[50\] - Gophers libres
*Fuente: <https://github.com/golang-samples/gopher-vector>*

\[51\] - Índice Tiobe
*Fuente: <https://www.tiobe.com/tiobe-index>*

\[52\] - Logos oficiales de *Go*
*Fuente: <https://golang.org/s/logos>*

\[53\] - UCA - Pontificia Universidad Católica Argentina
*Fuente: <http://uca.edu.ar>*

\[54\] - Python - Glosario
*Fuente: <https://docs.python.org/3/glossary.html?highlight=duck#term-duck-typing>*
